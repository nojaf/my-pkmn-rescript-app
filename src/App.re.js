// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Exn from "rescript/lib/es6/Exn.js";
import * as Int from "rescript/lib/es6/Int.js";
import * as React from "react";
import * as Option from "rescript/lib/es6/Option.js";
import * as $$Promise from "rescript/lib/es6/Promise.js";
import * as UsehooksTs from "usehooks-ts";
import * as S$RescriptSchema from "rescript-schema/src/S.re.js";
import * as JsxRuntime from "react/jsx-runtime";

import './App.css'
;

function getId(state) {
  switch (state.TAG) {
    case "Loading" :
      return state._0;
    case "Failed" :
    case "Data" :
      return state.id;
  }
}

let pkmnSchema = S$RescriptSchema.object(s => ({
  name: s.f("name", S$RescriptSchema.string),
  image: s.nestedField("sprites", "front_default", S$RescriptSchema.string)
}));

function decodeJson(json) {
  let pkmn = S$RescriptSchema.parseWith(json, pkmnSchema);
  if (pkmn.TAG === "Ok") {
    return {
      TAG: "Ok",
      _0: pkmn._0
    };
  } else {
    return {
      TAG: "Error",
      _0: S$RescriptSchema.$$Error.message(pkmn._0)
    };
  }
}

let unknownErrorMessage = "Unexpected error during API request";

function App(props) {
  let match = React.useState(() => ({
    TAG: "Loading",
    _0: "25"
  }));
  let setState = match[1];
  let state = match[0];
  let load = UsehooksTs.useDebounceCallback(text => setState(param => ({
    TAG: "Loading",
    _0: text
  })), 500);
  React.useEffect(() => {
    Option.forEach(Int.fromString(getId(state), undefined), id => {
      let idAsString = id.toString();
      $$Promise.$$catch(fetch("https://pokeapi.co/api/v2/pokemon/" + idAsString).then(response => {
        let code = response.status;
        if (code === 200) {
          return response.json().then(decodeJson);
        } else {
          return Promise.resolve({
            TAG: "Error",
            _0: "The API could not return a pokemon for \"" + idAsString + "\""
          });
        }
      }), exn => {
        let reason = exn.RE_EXN_ID === Exn.$$Error ? Option.getOr(exn._1.message, unknownErrorMessage) : unknownErrorMessage;
        return Promise.resolve({
          TAG: "Error",
          _0: reason
        });
      }).then(result => {
        if (result.TAG === "Ok") {
          let match = result._0;
          let image = match.image;
          let name = match.name;
          return setState(param => ({
            TAG: "Data",
            id: idAsString,
            name: name,
            image: image
          }));
        }
        let err = result._0;
        setState(param => ({
          TAG: "Failed",
          id: idAsString,
          reason: err
        }));
      });
    });
  }, [getId(state)]);
  let match$1;
  switch (state.TAG) {
    case "Loading" :
      match$1 = [
        "Loading " + state._0 + "...",
        "loading",
        null
      ];
      break;
    case "Failed" :
      match$1 = [
        state.reason,
        "error",
        null
      ];
      break;
    case "Data" :
      match$1 = [
        state.name,
        "",
        JsxRuntime.jsx("img", {
          src: state.image
        })
      ];
      break;
  }
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
    children: [
      JsxRuntime.jsx("div", {
        children: JsxRuntime.jsx("a", {
          children: JsxRuntime.jsx("img", {
            src: "https://avatars.githubusercontent.com/u/29257325?s=200&v=4"
          }),
          href: "https://rescript-lang.org/"
        })
      }),
      JsxRuntime.jsx("h1", {
        children: "Hello ReScript"
      }),
      JsxRuntime.jsxs("div", {
        children: [
          JsxRuntime.jsx("input", {
            defaultValue: getId(state),
            placeholder: "Enter the number of a Pokemon",
            type: "number",
            onChange: ev => load(ev.target.value)
          }),
          JsxRuntime.jsx("p", {
            children: match$1[0],
            className: match$1[1]
          }),
          match$1[2]
        ],
        className: "card"
      })
    ]
  });
}

let make = App;

export {
  make,
}
/*  Not a pure module */
